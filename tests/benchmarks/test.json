{
    "py/object": "commonpower.benchmark.benchmark.Benchmark",
    "py/state": {
        "benchmark_name": "test_jupyternotebook_ConstantPricesScenario_PersistenceForecaster_Train_WithProjectionSafeguard_DDPenalty",
        "n_steps": 24,
        "fixed_start": null,
        "global_seed": null,
        "commonpower_version": "0.3.1",
        "system_node": {
            "py/object": "commonpower.core.System",
            "model": null,
            "instance": null,
            "controller": {
                "py/object": "commonpower.control.controllers.OptimalController",
                "name": "global",
                "ctrl_type": "oc",
                "nodes": [
                    {
                        "py/id": 2
                    },
                    {
                        "py/object": "commonpower.models.busses.ExternalGrid",
                        "model": null,
                        "instance": null,
                        "controller": {
                            "py/id": 3
                        },
                        "name": "ExternalGrid",
                        "id": "",
                        "model_elements": [],
                        "config": {},
                        "is_valid": false,
                        "t": null,
                        "tau": null,
                        "horizon": null,
                        "nodes": [],
                        "data_providers": [],
                        "stand_alone": true
                    },
                    {
                        "py/object": "commonpower.core.System",
                        "model": null,
                        "instance": null,
                        "controller": {
                            "py/id": 3
                        },
                        "name": "System",
                        "id": "",
                        "model_elements": [],
                        "config": {},
                        "nodes": [
                            {
                                "py/object": "commonpower.models.busses.RTPricedBus",
                                "model": null,
                                "instance": null,
                                "controller": {
                                    "py/object": "commonpower.control.controllers.RLControllerSB3",
                                    "name": "agent1",
                                    "ctrl_type": "rl",
                                    "nodes": [
                                        {
                                            "py/id": 14
                                        },
                                        {
                                            "py/object": "commonpower.models.components.Load",
                                            "model": null,
                                            "instance": null,
                                            "controller": {
                                                "py/id": 15
                                            },
                                            "name": "Load1",
                                            "id": "",
                                            "model_elements": [],
                                            "config": {},
                                            "is_valid": false,
                                            "t": null,
                                            "tau": null,
                                            "horizon": null,
                                            "nodes": [],
                                            "data_providers": [
                                                {
                                                    "py/object": "commonpower.data_forecasting.base.DataProvider",
                                                    "data": {
                                                        "py/object": "commonpower.data_forecasting.data_sources.CSVDataSource",
                                                        "frequency": {
                                                            "py/object": "datetime.timedelta",
                                                            "days": 0,
                                                            "seconds": 3600,
                                                            "microseconds": 0
                                                        },
                                                        "data": {
                                                            "py/object": "pandas.core.frame.DataFrame",
                                                            "py/state": {
                                                                "_mgr": {
                                                                    "py/reduce": [
                                                                        {
                                                                            "py/type": "pandas.core.internals.managers.BlockManager"
                                                                        },
                                                                        {
                                                                            "py/tuple": [
                                                                                {
                                                                                    "py/tuple": [
                                                                                        {
                                                                                            "py/reduce": [
                                                                                                {
                                                                                                    "py/function": "pandas._libs.internals._unpickle_block"
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/function": "numpy.core.multiarray._reconstruct"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        {
                                                                                                                            "py/type": "numpy.ndarray"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                0
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/b64": "Yg=="
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        1,
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                1,
                                                                                                                                8784
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/reduce": [
                                                                                                                                {
                                                                                                                                    "py/type": "numpy.dtype"
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "py/tuple": [
                                                                                                                                        "f8",
                                                                                                                                        false,
                                                                                                                                        true
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "py/tuple": [
                                                                                                                                        3,
                                                                                                                                        "<",
                                                                                                                                        null,
                                                                                                                                        null,
                                                                                                                                        null,
                                                                                                                                        -1,
                                                                                                                                        -1,
                                                                                                                                        0
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        false,
                                                                                                                        {
                                                                                                                            "py/b64": ""
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/type": "builtins.slice"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        0,
                                                                                                                        1,
                                                                                                                        1
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        2
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                [
                                                                                    {
                                                                                        "py/object": "pandas.core.indexes.base.Index",
                                                                                        "_data": {
                                                                                            "py/reduce": [
                                                                                                {
                                                                                                    "py/function": "numpy.core.multiarray._reconstruct"
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        {
                                                                                                            "py/type": "numpy.ndarray"
                                                                                                        },
                                                                                                        {
                                                                                                            "py/tuple": [
                                                                                                                0
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "py/b64": "Yg=="
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        1,
                                                                                                        {
                                                                                                            "py/tuple": [
                                                                                                                1
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/type": "numpy.dtype"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        "O8",
                                                                                                                        false,
                                                                                                                        true
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        3,
                                                                                                                        "|",
                                                                                                                        null,
                                                                                                                        null,
                                                                                                                        null,
                                                                                                                        -1,
                                                                                                                        -1,
                                                                                                                        63
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        false,
                                                                                                        [
                                                                                                            "p"
                                                                                                        ]
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "_name": null,
                                                                                        "_cache": {
                                                                                            "dtype": {
                                                                                                "py/id": 35
                                                                                            },
                                                                                            "_engine": {
                                                                                                "py/reduce": [
                                                                                                    {
                                                                                                        "py/function": "pandas._libs.index.__pyx_unpickle_ObjectEngine"
                                                                                                    },
                                                                                                    {
                                                                                                        "py/tuple": [
                                                                                                            {
                                                                                                                "py/type": "pandas._libs.index.ObjectEngine"
                                                                                                            },
                                                                                                            265140114,
                                                                                                            null
                                                                                                        ]
                                                                                                    },
                                                                                                    {
                                                                                                        "py/tuple": [
                                                                                                            {
                                                                                                                "py/type": "numpy.object_"
                                                                                                            },
                                                                                                            {
                                                                                                                "py/object": "pandas._libs.hashtable.PyObjectHashTable"
                                                                                                            },
                                                                                                            null,
                                                                                                            false,
                                                                                                            false,
                                                                                                            true,
                                                                                                            false,
                                                                                                            false,
                                                                                                            true,
                                                                                                            {
                                                                                                                "py/id": 34
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        "_id": {
                                                                                            "py/object": "builtins.object"
                                                                                        },
                                                                                        "_references": {
                                                                                            "py/object": "pandas._libs.internals.BlockValuesRefs"
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        "py/object": "pandas.core.indexes.datetimes.DatetimeIndex",
                                                                                        "_data": {
                                                                                            "py/reduce": [
                                                                                                {
                                                                                                    "py/function": "pandas._libs.arrays.__pyx_unpickle_NDArrayBacked"
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        {
                                                                                                            "py/type": "pandas.core.arrays.datetimes.DatetimeArray"
                                                                                                        },
                                                                                                        82904607,
                                                                                                        null
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/type": "numpy.dtype"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        "M8",
                                                                                                                        false,
                                                                                                                        true
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        4,
                                                                                                                        "<",
                                                                                                                        null,
                                                                                                                        null,
                                                                                                                        null,
                                                                                                                        -1,
                                                                                                                        -1,
                                                                                                                        0,
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                {},
                                                                                                                                {
                                                                                                                                    "py/tuple": [
                                                                                                                                        {
                                                                                                                                            "py/b64": "bnM="
                                                                                                                                        },
                                                                                                                                        1,
                                                                                                                                        1,
                                                                                                                                        1
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/function": "numpy.core.multiarray._reconstruct"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        {
                                                                                                                            "py/type": "numpy.ndarray"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                0
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/b64": "Yg=="
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        1,
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                8784
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/reduce": [
                                                                                                                                {
                                                                                                                                    "py/type": "numpy.dtype"
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "py/tuple": [
                                                                                                                                        "M8",
                                                                                                                                        false,
                                                                                                                                        true
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "py/tuple": [
                                                                                                                                        4,
                                                                                                                                        "<",
                                                                                                                                        null,
                                                                                                                                        null,
                                                                                                                                        null,
                                                                                                                                        -1,
                                                                                                                                        -1,
                                                                                                                                        0,
                                                                                                                                        {
                                                                                                                                            "py/tuple": [
                                                                                                                                                {},
                                                                                                                                                {
                                                                                                                                                    "py/tuple": [
                                                                                                                                                        {
                                                                                                                                                            "py/b64": "bnM="
                                                                                                                                                        },
                                                                                                                                                        1,
                                                                                                                                                        1,
                                                                                                                                                        1
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        false,
                                                                                                                        {
                                                                                                                            "py/b64": ""
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "_freq": {
                                                                                                                "py/reduce": [
                                                                                                                    {
                                                                                                                        "py/type": "pandas._libs.tslibs.offsets.Hour"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "py/tuple": [
                                                                                                                            1,
                                                                                                                            false
                                                                                                                        ]
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            "_cache": {
                                                                                                                "_creso": 10
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "_name": "t",
                                                                                        "_cache": {
                                                                                            "_na_value": {
                                                                                                "py/reduce": [
                                                                                                    {
                                                                                                        "py/function": "pandas._libs.tslibs.nattype.__nat_unpickle"
                                                                                                    },
                                                                                                    {
                                                                                                        "py/tuple": [
                                                                                                            null
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "_constructor": {
                                                                                                "py/type": "pandas.core.indexes.datetimes.DatetimeIndex"
                                                                                            },
                                                                                            "_can_hold_na": true
                                                                                        },
                                                                                        "_id": {
                                                                                            "py/object": "builtins.object"
                                                                                        },
                                                                                        "_references": {
                                                                                            "py/object": "pandas._libs.internals.BlockValuesRefs"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "_typ": "dataframe",
                                                                "_metadata": [],
                                                                "attrs": {},
                                                                "_flags": {
                                                                    "allows_duplicate_labels": true
                                                                }
                                                            }
                                                        },
                                                        "datetime_format": "%Y-%m-%d %H:%M:00",
                                                        "hash": ""
                                                    },
                                                    "forecaster": {
                                                        "py/object": "commonpower.data_forecasting.forecasters.PersistenceForecaster",
                                                        "frequency": {
                                                            "py/id": 24
                                                        },
                                                        "horizon": {
                                                            "py/object": "datetime.timedelta",
                                                            "days": 0,
                                                            "seconds": 21600,
                                                            "microseconds": 0
                                                        },
                                                        "look_back": {
                                                            "py/object": "datetime.timedelta",
                                                            "days": 1,
                                                            "seconds": 0,
                                                            "microseconds": 0
                                                        }
                                                    },
                                                    "horizon": {
                                                        "py/id": 60
                                                    },
                                                    "frequency": {
                                                        "py/id": 24
                                                    },
                                                    "observable_features": {
                                                        "py/id": 34
                                                    }
                                                },
                                                {
                                                    "py/object": "commonpower.data_forecasting.base.DataProvider",
                                                    "data": {
                                                        "py/object": "commonpower.data_forecasting.data_sources.ConstantDataSource",
                                                        "frequency": {
                                                            "py/id": 24
                                                        },
                                                        "values_dict": {
                                                            "q": 0.0
                                                        },
                                                        "date_range": [
                                                            {
                                                                "py/object": "datetime.datetime",
                                                                "__reduce__": [
                                                                    {
                                                                        "py/type": "datetime.datetime"
                                                                    },
                                                                    [
                                                                        "B+ABAQAAAAAAAA=="
                                                                    ]
                                                                ]
                                                            },
                                                            {
                                                                "py/object": "datetime.datetime",
                                                                "__reduce__": [
                                                                    {
                                                                        "py/type": "datetime.datetime"
                                                                    },
                                                                    [
                                                                        "B+AMHxcAAAAAAA=="
                                                                    ]
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "forecaster": {
                                                        "py/id": 59
                                                    },
                                                    "horizon": {
                                                        "py/id": 60
                                                    },
                                                    "frequency": {
                                                        "py/id": 24
                                                    },
                                                    "observable_features": [
                                                        "q"
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "py/object": "commonpower.models.components.RenewableGen",
                                            "model": null,
                                            "instance": null,
                                            "controller": {
                                                "py/id": 15
                                            },
                                            "name": "PV1",
                                            "id": "",
                                            "model_elements": [],
                                            "config": {
                                                "py/id": 19
                                            },
                                            "is_valid": false,
                                            "t": null,
                                            "tau": null,
                                            "horizon": null,
                                            "nodes": [],
                                            "data_providers": [
                                                {
                                                    "py/object": "commonpower.data_forecasting.base.DataProvider",
                                                    "data": {
                                                        "py/object": "commonpower.data_forecasting.data_sources.CSVDataSource",
                                                        "frequency": {
                                                            "py/id": 24
                                                        },
                                                        "data": {
                                                            "py/object": "pandas.core.frame.DataFrame",
                                                            "py/state": {
                                                                "_mgr": {
                                                                    "py/reduce": [
                                                                        {
                                                                            "py/type": "pandas.core.internals.managers.BlockManager"
                                                                        },
                                                                        {
                                                                            "py/tuple": [
                                                                                {
                                                                                    "py/tuple": [
                                                                                        {
                                                                                            "py/reduce": [
                                                                                                {
                                                                                                    "py/function": "pandas._libs.internals._unpickle_block"
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/function": "numpy.core.multiarray._reconstruct"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        {
                                                                                                                            "py/type": "numpy.ndarray"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                0
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/b64": "Yg=="
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        1,
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                1,
                                                                                                                                8784
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/id": 30
                                                                                                                        },
                                                                                                                        false,
                                                                                                                        {
                                                                                                                            "py/b64": ""
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/type": "builtins.slice"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        0,
                                                                                                                        1,
                                                                                                                        1
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        2
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                [
                                                                                    {
                                                                                        "py/object": "pandas.core.indexes.base.Index",
                                                                                        "_data": {
                                                                                            "py/reduce": [
                                                                                                {
                                                                                                    "py/function": "numpy.core.multiarray._reconstruct"
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        {
                                                                                                            "py/type": "numpy.ndarray"
                                                                                                        },
                                                                                                        {
                                                                                                            "py/tuple": [
                                                                                                                0
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "py/b64": "Yg=="
                                                                                                        }
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        1,
                                                                                                        {
                                                                                                            "py/tuple": [
                                                                                                                1
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "py/id": 35
                                                                                                        },
                                                                                                        false,
                                                                                                        [
                                                                                                            "p"
                                                                                                        ]
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "_name": null,
                                                                                        "_cache": {
                                                                                            "dtype": {
                                                                                                "py/id": 35
                                                                                            },
                                                                                            "_engine": {
                                                                                                "py/reduce": [
                                                                                                    {
                                                                                                        "py/function": "pandas._libs.index.__pyx_unpickle_ObjectEngine"
                                                                                                    },
                                                                                                    {
                                                                                                        "py/tuple": [
                                                                                                            {
                                                                                                                "py/type": "pandas._libs.index.ObjectEngine"
                                                                                                            },
                                                                                                            265140114,
                                                                                                            null
                                                                                                        ]
                                                                                                    },
                                                                                                    {
                                                                                                        "py/tuple": [
                                                                                                            {
                                                                                                                "py/type": "numpy.object_"
                                                                                                            },
                                                                                                            {
                                                                                                                "py/object": "pandas._libs.hashtable.PyObjectHashTable"
                                                                                                            },
                                                                                                            null,
                                                                                                            false,
                                                                                                            false,
                                                                                                            true,
                                                                                                            false,
                                                                                                            false,
                                                                                                            true,
                                                                                                            {
                                                                                                                "py/id": 83
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            "is_unique": true
                                                                                        },
                                                                                        "_id": {
                                                                                            "py/object": "builtins.object"
                                                                                        },
                                                                                        "_references": {
                                                                                            "py/object": "pandas._libs.internals.BlockValuesRefs"
                                                                                        }
                                                                                    },
                                                                                    {
                                                                                        "py/object": "pandas.core.indexes.datetimes.DatetimeIndex",
                                                                                        "_data": {
                                                                                            "py/reduce": [
                                                                                                {
                                                                                                    "py/function": "pandas._libs.arrays.__pyx_unpickle_NDArrayBacked"
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        {
                                                                                                            "py/type": "pandas.core.arrays.datetimes.DatetimeArray"
                                                                                                        },
                                                                                                        82904607,
                                                                                                        null
                                                                                                    ]
                                                                                                },
                                                                                                {
                                                                                                    "py/tuple": [
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/type": "numpy.dtype"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        "M8",
                                                                                                                        false,
                                                                                                                        true
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        4,
                                                                                                                        "<",
                                                                                                                        null,
                                                                                                                        null,
                                                                                                                        null,
                                                                                                                        -1,
                                                                                                                        -1,
                                                                                                                        0,
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                {},
                                                                                                                                {
                                                                                                                                    "py/tuple": [
                                                                                                                                        {
                                                                                                                                            "py/b64": "bnM="
                                                                                                                                        },
                                                                                                                                        1,
                                                                                                                                        1,
                                                                                                                                        1
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "py/reduce": [
                                                                                                                {
                                                                                                                    "py/function": "numpy.core.multiarray._reconstruct"
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        {
                                                                                                                            "py/type": "numpy.ndarray"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                0
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/b64": "Yg=="
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                {
                                                                                                                    "py/tuple": [
                                                                                                                        1,
                                                                                                                        {
                                                                                                                            "py/tuple": [
                                                                                                                                8784
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "py/reduce": [
                                                                                                                                {
                                                                                                                                    "py/type": "numpy.dtype"
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "py/tuple": [
                                                                                                                                        "M8",
                                                                                                                                        false,
                                                                                                                                        true
                                                                                                                                    ]
                                                                                                                                },
                                                                                                                                {
                                                                                                                                    "py/tuple": [
                                                                                                                                        4,
                                                                                                                                        "<",
                                                                                                                                        null,
                                                                                                                                        null,
                                                                                                                                        null,
                                                                                                                                        -1,
                                                                                                                                        -1,
                                                                                                                                        0,
                                                                                                                                        {
                                                                                                                                            "py/tuple": [
                                                                                                                                                {},
                                                                                                                                                {
                                                                                                                                                    "py/tuple": [
                                                                                                                                                        {
                                                                                                                                                            "py/b64": "bnM="
                                                                                                                                                        },
                                                                                                                                                        1,
                                                                                                                                                        1,
                                                                                                                                                        1
                                                                                                                                                    ]
                                                                                                                                                }
                                                                                                                                            ]
                                                                                                                                        }
                                                                                                                                    ]
                                                                                                                                }
                                                                                                                            ]
                                                                                                                        },
                                                                                                                        false,
                                                                                                                        {
                                                                                                                            "py/b64": ""
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "_freq": {
                                                                                                                "py/reduce": [
                                                                                                                    {
                                                                                                                        "py/type": "pandas._libs.tslibs.offsets.Hour"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        "py/tuple": [
                                                                                                                            1,
                                                                                                                            false
                                                                                                                        ]
                                                                                                                    }
                                                                                                                ]
                                                                                                            },
                                                                                                            "_cache": {
                                                                                                                "_creso": 10
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "_name": "t",
                                                                                        "_cache": {
                                                                                            "_na_value": {
                                                                                                "py/id": 53
                                                                                            },
                                                                                            "_constructor": {
                                                                                                "py/type": "pandas.core.indexes.datetimes.DatetimeIndex"
                                                                                            },
                                                                                            "_can_hold_na": true
                                                                                        },
                                                                                        "_id": {
                                                                                            "py/object": "builtins.object"
                                                                                        },
                                                                                        "_references": {
                                                                                            "py/object": "pandas._libs.internals.BlockValuesRefs"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                "_typ": "dataframe",
                                                                "_metadata": {
                                                                    "py/id": 56
                                                                },
                                                                "attrs": {},
                                                                "_flags": {
                                                                    "allows_duplicate_labels": true
                                                                }
                                                            }
                                                        },
                                                        "datetime_format": "%Y-%m-%d %H:%M:00",
                                                        "hash": ""
                                                    },
                                                    "forecaster": {
                                                        "py/id": 59
                                                    },
                                                    "horizon": {
                                                        "py/id": 60
                                                    },
                                                    "frequency": {
                                                        "py/id": 24
                                                    },
                                                    "observable_features": {
                                                        "py/id": 83
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "py/object": "commonpower.models.components.ESSLinear",
                                            "model": null,
                                            "instance": null,
                                            "controller": {
                                                "py/id": 15
                                            },
                                            "name": "ESS1",
                                            "id": "",
                                            "model_elements": [],
                                            "config": {
                                                "p": {
                                                    "py/tuple": [
                                                        -1.5,
                                                        1.5
                                                    ]
                                                },
                                                "q": {
                                                    "py/tuple": [
                                                        0,
                                                        0
                                                    ]
                                                },
                                                "soc": {
                                                    "py/tuple": [
                                                        0.5,
                                                        4.5
                                                    ]
                                                },
                                                "soc_init": {
                                                    "py/object": "commonpower.utils.param_initialization.RangeInitializer",
                                                    "lb": 1.0,
                                                    "ub": 4.0,
                                                    "sampling_mode": "uniform"
                                                }
                                            },
                                            "is_valid": false,
                                            "t": null,
                                            "tau": null,
                                            "horizon": null,
                                            "nodes": [],
                                            "data_providers": []
                                        }
                                    ],
                                    "node_ids": [],
                                    "top_level_nodes": [],
                                    "history": {},
                                    "obs_mask": {},
                                    "obs_types": [
                                        {
                                            "py/reduce": [
                                                {
                                                    "py/type": "commonpower.modelling.ElementTypes"
                                                },
                                                {
                                                    "py/tuple": [
                                                        4
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "py/reduce": [
                                                {
                                                    "py/type": "commonpower.modelling.ElementTypes"
                                                },
                                                {
                                                    "py/tuple": [
                                                        1
                                                    ]
                                                }
                                            ]
                                        }
                                    ],
                                    "global_obs_elements": null,
                                    "input_space": null,
                                    "cost_callback": {
                                        "py/function": "commonpower.control.controller_utils.single_step_cost_callback"
                                    },
                                    "device": "cpu",
                                    "train": true,
                                    "policy": null,
                                    "safety_layer": {
                                        "py/object": "commonpower.control.safety_layer.safety_layers.ActionProjectionSafetyLayer",
                                        "nodes": null,
                                        "top_level_nodes": null,
                                        "obj_fcn": null,
                                        "unsafe_action": null,
                                        "penalty": {
                                            "py/object": "commonpower.control.safety_layer.penalties.DistanceDependingPenalty",
                                            "penalty_factor": 1.0
                                        },
                                        "solver": {
                                            "py/object": "pyomo.solvers.plugins.solvers.gurobi_direct.GurobiDirect",
                                            "type": "gurobi_direct",
                                            "name": "gurobi_direct",
                                            "_doc": "gurobi_direct OptSolver",
                                            "options": {
                                                "py/object": "pyomo.common.collections.bunch.Bunch",
                                                "MIPFocus": 1,
                                                "IntFeasTol": 1e-09,
                                                "TimeLimit": 60,
                                                "__dict__": {
                                                    "_name_": "Bunch"
                                                }
                                            },
                                            "_smap_id": null,
                                            "_load_solutions": true,
                                            "_select_index": 0,
                                            "_report_timing": false,
                                            "_suffixes": [],
                                            "_log_file": null,
                                            "_soln_file": null,
                                            "_default_variable_value": null,
                                            "_assert_available": false,
                                            "_problem_format": null,
                                            "_valid_problem_formats": [],
                                            "_results_format": null,
                                            "_valid_result_formats": {},
                                            "_results_reader": null,
                                            "_problem": null,
                                            "_problem_files": null,
                                            "_metasolver": false,
                                            "_allow_callbacks": false,
                                            "_callback": null,
                                            "_capabilities": {
                                                "py/object": "pyomo.common.collections.bunch.Bunch",
                                                "linear": true,
                                                "quadratic_objective": true,
                                                "quadratic_constraint": true,
                                                "integer": true,
                                                "sos1": true,
                                                "sos2": true,
                                                "__dict__": {
                                                    "_name_": "Bunch"
                                                }
                                            },
                                            "_pyomo_model": null,
                                            "_solver_model": null,
                                            "_symbol_map": {
                                                "py/object": "pyomo.core.expr.symbol_map.SymbolMap",
                                                "py/state": {
                                                    "py/tuple": [
                                                        {},
                                                        {},
                                                        null
                                                    ]
                                                }
                                            },
                                            "_labeler": null,
                                            "_pyomo_var_to_solver_var_map": {
                                                "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                                "py/state": [
                                                    {}
                                                ]
                                            },
                                            "_solver_var_to_pyomo_var_map": {
                                                "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                                "py/state": [
                                                    {}
                                                ]
                                            },
                                            "_pyomo_con_to_solver_con_map": {},
                                            "_solver_con_to_pyomo_con_map": {
                                                "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                                "py/state": [
                                                    {}
                                                ]
                                            },
                                            "_vars_referenced_by_con": {
                                                "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                                "py/state": [
                                                    {}
                                                ]
                                            },
                                            "_vars_referenced_by_obj": {
                                                "py/object": "pyomo.common.collections.component_set.ComponentSet",
                                                "py/state": [
                                                    {}
                                                ]
                                            },
                                            "_objective": null,
                                            "results": null,
                                            "_skip_trivial_constraints": false,
                                            "_output_fixed_variable_bounds": false,
                                            "_python_api_exists": true,
                                            "_symbolic_solver_labels": false,
                                            "_referenced_variables": {
                                                "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                                "py/state": [
                                                    {}
                                                ]
                                            },
                                            "_keepfiles": false,
                                            "_save_results": true,
                                            "_needs_updated": true,
                                            "_callback_func": null,
                                            "_range_constraints": {
                                                "py/set": []
                                            },
                                            "_max_obj_degree": 2,
                                            "_max_constraint_degree": 2,
                                            "_manage_env": true,
                                            "_env": null,
                                            "_env_options": null
                                        }
                                    },
                                    "load_path": null,
                                    "train_history": {},
                                    "deployment_history": [],
                                    "denormalize_inputs": false
                                },
                                "name": "MultiFamilyHouse",
                                "id": "",
                                "model_elements": [],
                                "config": {
                                    "p": {
                                        "py/tuple": [
                                            -50,
                                            50
                                        ]
                                    },
                                    "q": {
                                        "py/tuple": [
                                            -50,
                                            50
                                        ]
                                    },
                                    "v": {
                                        "py/tuple": [
                                            0.95,
                                            1.05
                                        ]
                                    },
                                    "d": {
                                        "py/tuple": [
                                            -15,
                                            15
                                        ]
                                    }
                                },
                                "is_valid": false,
                                "t": null,
                                "tau": null,
                                "horizon": null,
                                "nodes": [
                                    {
                                        "py/id": 17
                                    },
                                    {
                                        "py/id": 69
                                    },
                                    {
                                        "py/id": 105
                                    }
                                ],
                                "data_providers": [
                                    {
                                        "py/object": "commonpower.data_forecasting.base.DataProvider",
                                        "data": {
                                            "py/object": "commonpower.data_forecasting.data_sources.ConstantDataSource",
                                            "frequency": {
                                                "py/id": 24
                                            },
                                            "values_dict": {
                                                "psib": 0.37
                                            },
                                            "date_range": [
                                                {
                                                    "py/object": "datetime.datetime",
                                                    "__reduce__": [
                                                        {
                                                            "py/type": "datetime.datetime"
                                                        },
                                                        [
                                                            "B+ABAQAAAAAAAA=="
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "py/object": "datetime.datetime",
                                                    "__reduce__": [
                                                        {
                                                            "py/type": "datetime.datetime"
                                                        },
                                                        [
                                                            "B+AMHxcAAAAAAA=="
                                                        ]
                                                    ]
                                                }
                                            ]
                                        },
                                        "forecaster": {
                                            "py/id": 59
                                        },
                                        "horizon": {
                                            "py/id": 60
                                        },
                                        "frequency": {
                                            "py/id": 24
                                        },
                                        "observable_features": [
                                            "psib"
                                        ]
                                    },
                                    {
                                        "py/object": "commonpower.data_forecasting.base.DataProvider",
                                        "data": {
                                            "py/object": "commonpower.data_forecasting.data_sources.ConstantDataSource",
                                            "frequency": {
                                                "py/id": 24
                                            },
                                            "values_dict": {
                                                "psis": 0.08
                                            },
                                            "date_range": {
                                                "py/id": 159
                                            }
                                        },
                                        "forecaster": {
                                            "py/id": 59
                                        },
                                        "horizon": {
                                            "py/id": 60
                                        },
                                        "frequency": {
                                            "py/id": 24
                                        },
                                        "observable_features": [
                                            "psis"
                                        ]
                                    }
                                ],
                                "stand_alone": true
                            },
                            {
                                "py/object": "commonpower.models.busses.ExternalGrid",
                                "model": null,
                                "instance": null,
                                "controller": {
                                    "py/id": 3
                                },
                                "name": "ExternalGrid",
                                "id": "",
                                "model_elements": [],
                                "config": {
                                    "py/id": 7
                                },
                                "is_valid": false,
                                "t": null,
                                "tau": null,
                                "horizon": null,
                                "nodes": [],
                                "data_providers": [],
                                "stand_alone": true
                            }
                        ],
                        "lines": [],
                        "controllers": {},
                        "t": null,
                        "tau": null,
                        "forecast_horizon": null,
                        "forecast_horizon_int": null,
                        "control_horizon": null,
                        "start_time": null,
                        "continuous_control": null,
                        "date_range": null,
                        "power_flow_model": {
                            "py/object": "commonpower.models.powerflow.PowerBalanceModel"
                        },
                        "env_func": null,
                        "solver": null
                    },
                    {
                        "py/id": 167
                    }
                ],
                "node_ids": [],
                "top_level_nodes": [],
                "history": {},
                "obs_mask": {},
                "obs_types": {
                    "py/id": 115
                },
                "global_obs_elements": null,
                "input_space": null,
                "cost_callback": {
                    "py/function": "commonpower.control.controller_utils.single_step_cost_callback"
                },
                "sys_inst": null,
                "model": null,
                "solver": {
                    "py/object": "pyomo.solvers.plugins.solvers.gurobi_direct.GurobiDirect",
                    "type": "gurobi_direct",
                    "name": "gurobi_direct",
                    "_doc": "gurobi_direct OptSolver",
                    "options": {
                        "py/object": "pyomo.common.collections.bunch.Bunch",
                        "MIPFocus": 1,
                        "IntFeasTol": 1e-09,
                        "TimeLimit": 60,
                        "__dict__": {
                            "_name_": "Bunch"
                        }
                    },
                    "_smap_id": null,
                    "_load_solutions": true,
                    "_select_index": 0,
                    "_report_timing": false,
                    "_suffixes": [],
                    "_log_file": null,
                    "_soln_file": null,
                    "_default_variable_value": null,
                    "_assert_available": false,
                    "_problem_format": null,
                    "_valid_problem_formats": [],
                    "_results_format": null,
                    "_valid_result_formats": {},
                    "_results_reader": null,
                    "_problem": null,
                    "_problem_files": null,
                    "_metasolver": false,
                    "_allow_callbacks": false,
                    "_callback": null,
                    "_capabilities": {
                        "py/object": "pyomo.common.collections.bunch.Bunch",
                        "linear": true,
                        "quadratic_objective": true,
                        "quadratic_constraint": true,
                        "integer": true,
                        "sos1": true,
                        "sos2": true,
                        "__dict__": {
                            "_name_": "Bunch"
                        }
                    },
                    "_pyomo_model": null,
                    "_solver_model": null,
                    "_symbol_map": {
                        "py/object": "pyomo.core.expr.symbol_map.SymbolMap",
                        "py/state": {
                            "py/tuple": [
                                {},
                                {},
                                null
                            ]
                        }
                    },
                    "_labeler": null,
                    "_pyomo_var_to_solver_var_map": {
                        "py/object": "pyomo.common.collections.component_map.ComponentMap",
                        "py/state": [
                            {}
                        ]
                    },
                    "_solver_var_to_pyomo_var_map": {
                        "py/object": "pyomo.common.collections.component_map.ComponentMap",
                        "py/state": [
                            {}
                        ]
                    },
                    "_pyomo_con_to_solver_con_map": {},
                    "_solver_con_to_pyomo_con_map": {
                        "py/object": "pyomo.common.collections.component_map.ComponentMap",
                        "py/state": [
                            {}
                        ]
                    },
                    "_vars_referenced_by_con": {
                        "py/object": "pyomo.common.collections.component_map.ComponentMap",
                        "py/state": [
                            {}
                        ]
                    },
                    "_vars_referenced_by_obj": {
                        "py/object": "pyomo.common.collections.component_set.ComponentSet",
                        "py/state": [
                            {}
                        ]
                    },
                    "_objective": null,
                    "results": null,
                    "_skip_trivial_constraints": false,
                    "_output_fixed_variable_bounds": false,
                    "_python_api_exists": true,
                    "_symbolic_solver_labels": false,
                    "_referenced_variables": {
                        "py/object": "pyomo.common.collections.component_map.ComponentMap",
                        "py/state": [
                            {}
                        ]
                    },
                    "_keepfiles": false,
                    "_save_results": true,
                    "_needs_updated": true,
                    "_callback_func": null,
                    "_range_constraints": {
                        "py/set": []
                    },
                    "_max_obj_degree": 2,
                    "_max_constraint_degree": 2,
                    "_manage_env": true,
                    "_env": null,
                    "_env_options": null
                },
                "control_input_trajectory_length": 1
            },
            "name": "System",
            "id": "",
            "model_elements": [],
            "config": {
                "py/id": 12
            },
            "nodes": [
                {
                    "py/object": "commonpower.models.busses.RTPricedBus",
                    "model": null,
                    "instance": null,
                    "controller": {
                        "py/object": "commonpower.control.controllers.RLControllerSB3",
                        "name": "agent1",
                        "ctrl_type": "rl",
                        "nodes": [
                            {
                                "py/id": 210
                            },
                            {
                                "py/object": "commonpower.models.components.Load",
                                "model": null,
                                "instance": null,
                                "controller": {
                                    "py/id": 211
                                },
                                "name": "Load1",
                                "id": "",
                                "model_elements": [],
                                "config": {
                                    "py/id": 19
                                },
                                "is_valid": false,
                                "t": null,
                                "tau": null,
                                "horizon": null,
                                "nodes": [],
                                "data_providers": [
                                    {
                                        "py/object": "commonpower.data_forecasting.base.DataProvider",
                                        "data": {
                                            "py/object": "commonpower.data_forecasting.data_sources.CSVDataSource",
                                            "frequency": {
                                                "py/object": "datetime.timedelta",
                                                "days": 0,
                                                "seconds": 3600,
                                                "microseconds": 0
                                            },
                                            "data": null,
                                            "datetime_format": "%Y-%m-%d %H:%M:00",
                                            "hash": "2614331bd250c4ca8ecd665feee0fac4950af2d573b5d2c1ac6abd58d4d14833"
                                        },
                                        "forecaster": {
                                            "py/object": "commonpower.data_forecasting.forecasters.PersistenceForecaster",
                                            "frequency": {
                                                "py/id": 219
                                            },
                                            "horizon": {
                                                "py/object": "datetime.timedelta",
                                                "days": 0,
                                                "seconds": 21600,
                                                "microseconds": 0
                                            },
                                            "look_back": {
                                                "py/object": "datetime.timedelta",
                                                "days": 1,
                                                "seconds": 0,
                                                "microseconds": 0
                                            }
                                        },
                                        "horizon": {
                                            "py/id": 221
                                        },
                                        "frequency": {
                                            "py/id": 219
                                        },
                                        "observable_features": {
                                            "py/reduce": [
                                                {
                                                    "py/function": "numpy.core.multiarray._reconstruct"
                                                },
                                                {
                                                    "py/tuple": [
                                                        {
                                                            "py/type": "numpy.ndarray"
                                                        },
                                                        {
                                                            "py/tuple": [
                                                                0
                                                            ]
                                                        },
                                                        {
                                                            "py/b64": "Yg=="
                                                        }
                                                    ]
                                                },
                                                {
                                                    "py/tuple": [
                                                        1,
                                                        {
                                                            "py/tuple": [
                                                                1
                                                            ]
                                                        },
                                                        {
                                                            "py/id": 35
                                                        },
                                                        false,
                                                        [
                                                            "p"
                                                        ]
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "py/object": "commonpower.data_forecasting.base.DataProvider",
                                        "data": {
                                            "py/object": "commonpower.data_forecasting.data_sources.ConstantDataSource",
                                            "frequency": {
                                                "py/id": 219
                                            },
                                            "values_dict": {
                                                "q": 0.0
                                            },
                                            "date_range": [
                                                {
                                                    "py/object": "datetime.datetime",
                                                    "__reduce__": [
                                                        {
                                                            "py/type": "datetime.datetime"
                                                        },
                                                        [
                                                            "B+ABAQAAAAAAAA=="
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "py/object": "datetime.datetime",
                                                    "__reduce__": [
                                                        {
                                                            "py/type": "datetime.datetime"
                                                        },
                                                        [
                                                            "B+AMHxcAAAAAAA=="
                                                        ]
                                                    ]
                                                }
                                            ]
                                        },
                                        "forecaster": {
                                            "py/id": 220
                                        },
                                        "horizon": {
                                            "py/id": 221
                                        },
                                        "frequency": {
                                            "py/id": 219
                                        },
                                        "observable_features": [
                                            "q"
                                        ]
                                    }
                                ]
                            },
                            {
                                "py/object": "commonpower.models.components.RenewableGen",
                                "model": null,
                                "instance": null,
                                "controller": {
                                    "py/id": 211
                                },
                                "name": "PV1",
                                "id": "",
                                "model_elements": [],
                                "config": {
                                    "py/id": 19
                                },
                                "is_valid": false,
                                "t": null,
                                "tau": null,
                                "horizon": null,
                                "nodes": [],
                                "data_providers": [
                                    {
                                        "py/object": "commonpower.data_forecasting.base.DataProvider",
                                        "data": {
                                            "py/object": "commonpower.data_forecasting.data_sources.CSVDataSource",
                                            "frequency": {
                                                "py/id": 219
                                            },
                                            "data": null,
                                            "datetime_format": "%Y-%m-%d %H:%M:00",
                                            "hash": "f910e9d2b5cf2a8633d0e2636c4cc378175cc71ef975ab917efc0a4518713653"
                                        },
                                        "forecaster": {
                                            "py/id": 220
                                        },
                                        "horizon": {
                                            "py/id": 221
                                        },
                                        "frequency": {
                                            "py/id": 219
                                        },
                                        "observable_features": {
                                            "py/reduce": [
                                                {
                                                    "py/function": "numpy.core.multiarray._reconstruct"
                                                },
                                                {
                                                    "py/tuple": [
                                                        {
                                                            "py/type": "numpy.ndarray"
                                                        },
                                                        {
                                                            "py/tuple": [
                                                                0
                                                            ]
                                                        },
                                                        {
                                                            "py/b64": "Yg=="
                                                        }
                                                    ]
                                                },
                                                {
                                                    "py/tuple": [
                                                        1,
                                                        {
                                                            "py/tuple": [
                                                                1
                                                            ]
                                                        },
                                                        {
                                                            "py/id": 35
                                                        },
                                                        false,
                                                        [
                                                            "p"
                                                        ]
                                                    ]
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            {
                                "py/object": "commonpower.models.components.ESSLinear",
                                "model": null,
                                "instance": null,
                                "controller": {
                                    "py/id": 211
                                },
                                "name": "ESS1",
                                "id": "",
                                "model_elements": [],
                                "config": {
                                    "p": {
                                        "py/tuple": [
                                            -1.5,
                                            1.5
                                        ]
                                    },
                                    "q": {
                                        "py/tuple": [
                                            0,
                                            0
                                        ]
                                    },
                                    "soc": {
                                        "py/tuple": [
                                            0.5,
                                            4.5
                                        ]
                                    },
                                    "soc_init": {
                                        "py/object": "commonpower.utils.param_initialization.RangeInitializer",
                                        "lb": 1.0,
                                        "ub": 4.0,
                                        "sampling_mode": "uniform"
                                    }
                                },
                                "is_valid": false,
                                "t": null,
                                "tau": null,
                                "horizon": null,
                                "nodes": [],
                                "data_providers": []
                            }
                        ],
                        "node_ids": [],
                        "top_level_nodes": [],
                        "history": {},
                        "obs_mask": {},
                        "obs_types": {
                            "py/id": 115
                        },
                        "global_obs_elements": null,
                        "input_space": null,
                        "cost_callback": {
                            "py/function": "commonpower.control.controller_utils.single_step_cost_callback"
                        },
                        "device": "cpu",
                        "train": true,
                        "policy": null,
                        "safety_layer": {
                            "py/object": "commonpower.control.safety_layer.safety_layers.ActionProjectionSafetyLayer",
                            "nodes": null,
                            "top_level_nodes": null,
                            "obj_fcn": null,
                            "unsafe_action": null,
                            "penalty": {
                                "py/object": "commonpower.control.safety_layer.penalties.DistanceDependingPenalty",
                                "penalty_factor": 1.0
                            },
                            "solver": {
                                "py/object": "pyomo.solvers.plugins.solvers.gurobi_direct.GurobiDirect",
                                "type": "gurobi_direct",
                                "name": "gurobi_direct",
                                "_doc": "gurobi_direct OptSolver",
                                "options": {
                                    "py/object": "pyomo.common.collections.bunch.Bunch",
                                    "MIPFocus": 1,
                                    "IntFeasTol": 1e-09,
                                    "TimeLimit": 60,
                                    "__dict__": {
                                        "_name_": "Bunch"
                                    }
                                },
                                "_smap_id": null,
                                "_load_solutions": true,
                                "_select_index": 0,
                                "_report_timing": false,
                                "_suffixes": [],
                                "_log_file": null,
                                "_soln_file": null,
                                "_default_variable_value": null,
                                "_assert_available": false,
                                "_problem_format": null,
                                "_valid_problem_formats": [],
                                "_results_format": null,
                                "_valid_result_formats": {},
                                "_results_reader": null,
                                "_problem": null,
                                "_problem_files": null,
                                "_metasolver": false,
                                "_allow_callbacks": false,
                                "_callback": null,
                                "_capabilities": {
                                    "py/object": "pyomo.common.collections.bunch.Bunch",
                                    "linear": true,
                                    "quadratic_objective": true,
                                    "quadratic_constraint": true,
                                    "integer": true,
                                    "sos1": true,
                                    "sos2": true,
                                    "__dict__": {
                                        "_name_": "Bunch"
                                    }
                                },
                                "_pyomo_model": null,
                                "_solver_model": null,
                                "_symbol_map": {
                                    "py/object": "pyomo.core.expr.symbol_map.SymbolMap",
                                    "py/state": {
                                        "py/tuple": [
                                            {},
                                            {},
                                            null
                                        ]
                                    }
                                },
                                "_labeler": null,
                                "_pyomo_var_to_solver_var_map": {
                                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                    "py/state": [
                                        {}
                                    ]
                                },
                                "_solver_var_to_pyomo_var_map": {
                                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                    "py/state": [
                                        {}
                                    ]
                                },
                                "_pyomo_con_to_solver_con_map": {},
                                "_solver_con_to_pyomo_con_map": {
                                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                    "py/state": [
                                        {}
                                    ]
                                },
                                "_vars_referenced_by_con": {
                                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                    "py/state": [
                                        {}
                                    ]
                                },
                                "_vars_referenced_by_obj": {
                                    "py/object": "pyomo.common.collections.component_set.ComponentSet",
                                    "py/state": [
                                        {}
                                    ]
                                },
                                "_objective": null,
                                "results": null,
                                "_skip_trivial_constraints": false,
                                "_output_fixed_variable_bounds": false,
                                "_python_api_exists": true,
                                "_symbolic_solver_labels": false,
                                "_referenced_variables": {
                                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                                    "py/state": [
                                        {}
                                    ]
                                },
                                "_keepfiles": false,
                                "_save_results": true,
                                "_needs_updated": true,
                                "_callback_func": null,
                                "_range_constraints": {
                                    "py/set": []
                                },
                                "_max_obj_degree": 2,
                                "_max_constraint_degree": 2,
                                "_manage_env": true,
                                "_env": null,
                                "_env_options": null
                            }
                        },
                        "load_path": null,
                        "train_history": {},
                        "deployment_history": [],
                        "denormalize_inputs": false
                    },
                    "name": "MultiFamilyHouse",
                    "id": "",
                    "model_elements": [],
                    "config": {
                        "p": {
                            "py/tuple": [
                                -50,
                                50
                            ]
                        },
                        "q": {
                            "py/tuple": [
                                -50,
                                50
                            ]
                        },
                        "v": {
                            "py/tuple": [
                                0.95,
                                1.05
                            ]
                        },
                        "d": {
                            "py/tuple": [
                                -15,
                                15
                            ]
                        }
                    },
                    "is_valid": false,
                    "t": null,
                    "tau": null,
                    "horizon": null,
                    "nodes": [
                        {
                            "py/id": 213
                        },
                        {
                            "py/id": 232
                        },
                        {
                            "py/id": 240
                        }
                    ],
                    "data_providers": [
                        {
                            "py/object": "commonpower.data_forecasting.base.DataProvider",
                            "data": {
                                "py/object": "commonpower.data_forecasting.data_sources.ConstantDataSource",
                                "frequency": {
                                    "py/id": 219
                                },
                                "values_dict": {
                                    "psib": 0.37
                                },
                                "date_range": [
                                    {
                                        "py/object": "datetime.datetime",
                                        "__reduce__": [
                                            {
                                                "py/type": "datetime.datetime"
                                            },
                                            [
                                                "B+ABAQAAAAAAAA=="
                                            ]
                                        ]
                                    },
                                    {
                                        "py/object": "datetime.datetime",
                                        "__reduce__": [
                                            {
                                                "py/type": "datetime.datetime"
                                            },
                                            [
                                                "B+AMHxcAAAAAAA=="
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "forecaster": {
                                "py/id": 220
                            },
                            "horizon": {
                                "py/id": 221
                            },
                            "frequency": {
                                "py/id": 219
                            },
                            "observable_features": [
                                "psib"
                            ]
                        },
                        {
                            "py/object": "commonpower.data_forecasting.base.DataProvider",
                            "data": {
                                "py/object": "commonpower.data_forecasting.data_sources.ConstantDataSource",
                                "frequency": {
                                    "py/id": 219
                                },
                                "values_dict": {
                                    "psis": 0.08
                                },
                                "date_range": {
                                    "py/id": 291
                                }
                            },
                            "forecaster": {
                                "py/id": 220
                            },
                            "horizon": {
                                "py/id": 221
                            },
                            "frequency": {
                                "py/id": 219
                            },
                            "observable_features": [
                                "psis"
                            ]
                        }
                    ],
                    "stand_alone": true
                },
                {
                    "py/id": 5
                }
            ],
            "lines": [],
            "controllers": {},
            "t": null,
            "tau": null,
            "forecast_horizon": null,
            "forecast_horizon_int": null,
            "control_horizon": null,
            "start_time": null,
            "continuous_control": null,
            "date_range": null,
            "power_flow_model": {
                "py/object": "commonpower.models.powerflow.PowerBalanceModel"
            },
            "env_func": null,
            "solver": null
        },
        "deployment_runner": {
            "py/object": "commonpower.control.runners.DeploymentRunner",
            "sys": {
                "py/id": 2
            },
            "controllers": null,
            "rl_controllers": null,
            "model_inst": null,
            "env": null,
            "solver": {
                "py/object": "pyomo.solvers.plugins.solvers.gurobi_direct.GurobiDirect",
                "type": "gurobi_direct",
                "name": "gurobi_direct",
                "_doc": "gurobi_direct OptSolver",
                "options": {
                    "py/object": "pyomo.common.collections.bunch.Bunch",
                    "MIPFocus": 1,
                    "IntFeasTol": 1e-09,
                    "TimeLimit": 60,
                    "__dict__": {
                        "_name_": "Bunch"
                    }
                },
                "_smap_id": null,
                "_load_solutions": true,
                "_select_index": 0,
                "_report_timing": false,
                "_suffixes": [],
                "_log_file": null,
                "_soln_file": null,
                "_default_variable_value": null,
                "_assert_available": false,
                "_problem_format": null,
                "_valid_problem_formats": [],
                "_results_format": null,
                "_valid_result_formats": {},
                "_results_reader": null,
                "_problem": null,
                "_problem_files": null,
                "_metasolver": false,
                "_allow_callbacks": false,
                "_callback": null,
                "_capabilities": {
                    "py/object": "pyomo.common.collections.bunch.Bunch",
                    "linear": true,
                    "quadratic_objective": true,
                    "quadratic_constraint": true,
                    "integer": true,
                    "sos1": true,
                    "sos2": true,
                    "__dict__": {
                        "_name_": "Bunch"
                    }
                },
                "_pyomo_model": null,
                "_solver_model": null,
                "_symbol_map": {
                    "py/object": "pyomo.core.expr.symbol_map.SymbolMap",
                    "py/state": {
                        "py/tuple": [
                            {},
                            {},
                            null
                        ]
                    }
                },
                "_labeler": null,
                "_pyomo_var_to_solver_var_map": {
                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                    "py/state": [
                        {}
                    ]
                },
                "_solver_var_to_pyomo_var_map": {
                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                    "py/state": [
                        {}
                    ]
                },
                "_pyomo_con_to_solver_con_map": {},
                "_solver_con_to_pyomo_con_map": {
                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                    "py/state": [
                        {}
                    ]
                },
                "_vars_referenced_by_con": {
                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                    "py/state": [
                        {}
                    ]
                },
                "_vars_referenced_by_obj": {
                    "py/object": "pyomo.common.collections.component_set.ComponentSet",
                    "py/state": [
                        {}
                    ]
                },
                "_objective": null,
                "results": null,
                "_skip_trivial_constraints": false,
                "_output_fixed_variable_bounds": false,
                "_python_api_exists": true,
                "_symbolic_solver_labels": false,
                "_referenced_variables": {
                    "py/object": "pyomo.common.collections.component_map.ComponentMap",
                    "py/state": [
                        {}
                    ]
                },
                "_keepfiles": false,
                "_save_results": true,
                "_needs_updated": true,
                "_callback_func": null,
                "_range_constraints": {
                    "py/set": []
                },
                "_max_obj_degree": 2,
                "_max_constraint_degree": 2,
                "_manage_env": true,
                "_env": null,
                "_env_options": null
            },
            "start_time": null,
            "forecast_horizon": {
                "py/id": 221
            },
            "control_horizon": {
                "py/object": "datetime.timedelta",
                "days": 3,
                "seconds": 0,
                "microseconds": 0
            },
            "dt": {
                "py/object": "datetime.timedelta",
                "days": 0,
                "seconds": 3600,
                "microseconds": 0
            },
            "continuous_control": false,
            "global_controller": {
                "py/id": 3
            },
            "history": {
                "py/object": "commonpower.modelling.ModelHistory",
                "model_entities": [
                    {
                        "py/id": 2
                    }
                ],
                "retention": -1,
                "history": []
            },
            "seed": 5,
            "normalize_actions": true,
            "alg_config": null,
            "wrapper": null
        },
        "trainer": null,
        "scenario_hash": "24e02e9722e3afa146bc78f22f786c0ed8e90311d770e527ddd4dda694a772c3"
    }
}
